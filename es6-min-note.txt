let 和 const 命令

let 命令 

let声明的变量只在它所在的代码块有效。

let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。

只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。

如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。“暂时性死区”

let不允许在相同作用域内，重复声明同一个变量。

let实际上为 JavaScript 新增了块级作用域。

ES6 允许块级作用域的任意嵌套。

ES6 规定，块级作用域之中，函数声明语句的行为类似于let，在块级作用域之外不可引用。

允许在块级作用域内声明函数。
函数声明类似于var，即会提升到全局作用域或函数作用域的头部。
同时，函数声明还会提升到所在的块级作用域的头部。

ES6 的块级作用域允许声明函数的规则，只在使用大括号的情况下成立，如果没有使用大括号，就会报错。


const 命令

const声明一个只读的常量。一旦声明，常量的值就不能改变。

const声明的变量不得改变值，这意味着，const一旦声明变量，就必须立即初始化，不能留到以后赋值。

const的作用域与let命令相同：只在声明所在的块级作用域内有效。

const命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用

const声明的常量，也与let一样不可重复声明。

const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。

ES6 声明变量的六种方法
ES5 只有两种声明变量的方法：var命令和function命令。ES6 除了添加let和const命令，后面章节还会提到，另外两种声明变量的方法：import命令和class命令。所以，ES6 一共有 6 种声明变量的方法。

顶层对象，在浏览器环境指的是window对象，在 Node 指的是global对象。

var命令和function命令声明的全局变量，依旧是顶层对象的属性；
let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。




		


************************************************************
第三课变量的解构赋值

数组的解构赋值

ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。

数组中提取值，按照对应位置，对变量赋值

只要等号两边的模式相同，左边的变量就会被赋予对应的值。

如果解构不成功，变量的值就等于undefined。

另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。

如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。如NaN，undefined,null,false,1,{}
只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。

解构赋值允许指定默认值。

注意，ES6 内部使用严格相等运算符（===），判断一个位置是否有值。所以，只有当一个数组成员严格等于undefined，默认值才会生效。

如果一个数组成员是null，默认值就不会生效，因为null不严格等于undefined。

如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值

默认值可以引用解构赋值的其他变量，但该变量必须已经声明。


*******
对象的解构赋值 
********

对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。

取不到值，最后等于undefined。

对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。

前者是匹配的模式，后者才是变量。真正被赋值的是变量后者，而不是模式前者。

对象可用逗号隔开，继续解构赋值

对象的解构也可以指定默认值。

默认值生效的条件是，对象的属性值严格等于undefined。

因为null与undefined不严格相等，所以是个有效的赋值，

如果解构失败，变量的值等于undefined。

如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。

大括号写在行首，JavaScript 引擎会将{x}理解成一个代码块，从而发生语法错误。解决方法，放在一个圆括号里

由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构

方括号这种写法，属于“属性名表达式”（参见《对象的扩展》一章）。


***********
字符串的解构赋值
************
字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。

类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值。


************
数值和布尔值的解构赋值
*************
解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。
数值和布尔值的包装对象都有toString属性，因此变量s都能取到值。

解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。


************
函数参数的解构赋值
**************
函数的参数也可以使用解构赋值。

函数参数的解构也可以使用默认值。

**************
圆括号问题
*************

ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。
建议只要有可能，就不要在模式中放置圆括号。

不能使用圆括号的情况
（1）变量声明语句
因为它们都是变量声明语句，模式不能使用圆括号。

（2）函数参数
函数参数也属于变量声明，因此不能带有圆括号。

（3）赋值语句的模式


可以使用圆括号的情况

可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。









******************************
字符串的扩展
******************************

JavaScript 允许采用\uxxxx形式表示一个字符，其中xxxx表示字符的 Unicode 码点。

这种表示法只限于码点在\u0000~\uFFFF之间的字符。超出这个范围的字符，必须用两个双字节的形式表示。

ES6 对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。

codePointAt()
codePointAt方法，能够正确处理 4 个字节储存的字符，返回一个字符的码点
(实例对象上)

codePointAt方法返回的是码点的十进制值，如果想要十六进制的值，可以使用toString方法转换一下。

codePointAt方法的参数，仍然是不正确的,
解决这个问题的一个办法是使用for...of循环

String.fromCodePoint()
String.fromCodePoint方法，可以识别大于0xFFFF的字符，弥补了String.fromCharCode方法的不足。在作用上，正好与codePointAt方法相反。
(定义在String对象上)


at()
at方法，可以识别 Unicode 编号大于0xFFFF的字符，返回正确的字符。

includes()：返回布尔值，表示是否找到了参数字符串。

startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。

endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。

这三个方法都支持第二个参数，表示开始搜索的位置。

使用第二个参数n时，endsWith的行为与其他两个方法有所不同。它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。

repeat() 
repeat方法返回一个新字符串，表示将原字符串重复n次。

参数如果是小数，会被取整。
参数是负数或者Infinity，会报错。
参数是会先进行取整运算
参数NaN等同于 0。
参数是字符串，则会先转换成数字。

padStart和padEnd一共接受两个参数，第一个参数用来指定字符串的最小长度，第二个参数是用来补全的字符串。

原字符串的长度，等于或大于指定的最小长度，则返回原字符串。

用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串

省略第二个参数，默认使用空格补全长度。

matchAll() § ?
matchAll方法返回一个正则表达式在当前字符串的所有匹配


模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。

在模板字符串中需要使用反引号，则前面要用反斜杠转义。

模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。

所有模板字符串的空格和换行，都是被保留的,可以使用trim方法消除它。

模板字符串中嵌入变量，需要将变量名写在${}之中。

大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。

模板字符串之中还能调用函数。

大括号中的值不是字符串，将按照一般的规则转为字符串。

模板字符串中的变量没有声明，将报错。

大括号内部是一个字符串，将会原样输出。

模板字符串甚至还能嵌套


模板字符串的功能，不仅仅是上面这些。它可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。这被称为“标签模板”功能（tagged template）。

标签模板其实不是模板，而是函数调用的一种特殊形式。“标签”指的就是函数，紧跟在后面的模板字符串就是它的参数。

模板字符里面有变量，就不是简单的调用了，而是会将模板字符串先处理成多个参数，再调用函数。

String.raw()
String.raw方法，往往用来充当模板字符串的处理函数，返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，对应于替换变量后的模板字符串。
		








************************
数值的扩展
***********************

ES6 提供了二进制和八进制数值的新的写法，分别用前缀0b（或0B）和0o（或0O）表示。


将0b和0o前缀的字符串数值转为十进制，要使用Number方法。

Number.isFinite()
用来检查一个数值是否为有限的（finite），即不是Infinity。
注意，如果参数类型不是数值，Number.isFinite一律返回false。

Number.isNaN()
用来检查一个值是否为NaN。
如果参数类型不是NaN，Number.isNaN一律返回false。


parseInt()和parseFloat()，
移植到Number对象上面，行为完全保持不变。

Number.isInteger()
用来判断一个数值是否为整数。
如果参数不是数值，Number.isInteger返回false。

Number.EPSILON 
新增一个极小的常量Number.EPSILON。根据规格，它表示 1 与大于 1 的最小浮点数之间的差。
Number.EPSILON的实质是一个可以接受的最小误差范围。

JavaScript 能够准确表示的整数范围在-2^53到2^53之间（不含两个端点），超过这个范围，无法精确表示这个值。

Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER这两个常量，用来表示这个范围的上下限。

Number.isSafeInteger()
则是用来判断一个整数是否落在这个范围之内。
要同时验证参与运算的每个值。

********
Math 对象的扩展 
**********

Math.trunc()
Math.trunc方法用于去除一个数的小数部分，返回整数部分
对于非数值，Math.trunc内部使用Number方法将其先转为数值。
对于空值和无法截取整数的值，返回NaN。

Math.sign() 
Math.sign方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。
参数为正数，返回+1；
参数为负数，返回-1；
参数为 0，返回0；
参数为-0，返回-0;
其他值，返回NaN。

参数是非数值，会自动转为数值。对于那些无法转为数值的值，会返回NaN。

Math.cbrt()
Math.cbrt方法用于计算一个数的立方根。

对于非数值，Math.cbrt方法内部也是先使用Number方法将其转为数值。

Math.clz32() 
Math.clz32方法返回一个数的 32 位无符号整数形式有多少个前导 0。
对于小数，Math.clz32方法只考虑整数部分。
对于空值或其他类型的值，Math.clz32方法会将它们先转为数值，然后再计算。

Math.imul()
Math.imul方法返回两个数以 32 位带符号整数形式相乘的结果，返回的也是一个 32 位的带符号整数。

Math.fround()
Math.fround方法返回一个数的32位单精度浮点数形式。

Math.hypot()
Math.hypot方法返回所有参数的平方和的平方根










******************************
函数的扩展
******************************

ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面。

参数变量是默认声明的，所以不能用let或const再次声明。

使用参数默认值时，函数不能有同名参数。

另外，一个容易忽略的地方是，参数默认值不是传值的，而是每次都重新计算默认值表达式的值。也就是说，参数默认值是惰性求值的。

参数默认值可以与解构赋值的默认值，结合起来使用。

第二个参数是一个对象，且属性设置默认值。不能省略第二个参数，

通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。如果非尾部的参数设置默认值，实际上这个参数是没法省略的。

有默认值的参数都不是尾参数。这时，无法只省略该参数，而不省略它后面的参数，除非显式输入undefined。

如果传入undefined，将触发该参数等于默认值，null则没有这个效果。

指定了默认值以后，函数的length属性，将返回没有指定默认值的参数个数。也就是说，指定了默认值后，length属性将失真。

length属性的返回值，等于函数的参数个数减去指定了默认值的参数个数。
同理，后文的 rest 参数也不会计入length属性。

如果设置了默认值的参数不是尾参数，那么length属性也不再计入后面的参数了。

作用域
一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的。


应用
利用参数默认值，可以指定某一个参数不得省略，如果省略就抛出一个错误。

这表明参数的默认值不是在定义时执行，而是在运行时执行。如果参数已经赋值，默认值中的函数就不会运行。

rest 参数（形式为...变量名），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。

注意，rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。

函数的length属性，不包括 rest 参数。

ES2016 做了一点修改，规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。

函数的name属性，返回该函数的函数名。

如果将一个匿名函数赋值给一个变量，ES5 的name属性，会返回空字符串，而 ES6 的name属性会返回实际的函数名。

Function构造函数返回的函数实例，name属性的值为anonymous

bind返回的函数，name属性值会加上bound前缀。

ES6 允许使用“箭头”（=>）定义函数。

如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。

如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。

由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。

如果箭头函数只有一行语句，且不需要返回值，可以采用下面的写法，就不用写大括号了。

箭头函数可以与变量解构结合使用。


使用注意点
箭头函数有几个使用注意点。

（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。

（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。

（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。

（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。

上面四点中，第一点尤其值得注意。this对象的指向是可变的，但是在箭头函数中，它是固定的。

除了this，以下三个变量在箭头函数之中也是不存在的，指向外层函数的对应变量：arguments、super、new.target


由于箭头函数没有自己的this，所以当然也就不能用call()、apply()、bind()这些方法去改变this的指向。

箭头函数内部，还可以再使用箭头函数。下面是一个 ES5 语法的多重嵌套函数。

双冒号运算符
函数绑定运算符是并排的两个冒号（::），双冒号左边是一个对象，右边是一个函数。该运算符会自动将左边的对象，作为上下文环境（即this对象），绑定到右边的函数上面。

如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上面。

如果双冒号运算符的运算结果，还是一个对象，就可以采用链式写法。



什么是尾调用？
尾调用（Tail Call）是函数式编程的一个重要概念，本身非常简单，一句话就能说清楚，就是指某个函数的最后一步是调用另一个函数。


还有赋值操作，所以不属于尾调用

尾调用不一定出现在函数尾部，只要是最后一步操作即可。

这就叫做“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。

注意，只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。

函数调用自身，称为递归。如果尾调用自身，就称为尾递归。

ES6 中只要使用尾递归，就不会发生栈溢出，相对节省内存。


递归函数的改写
尾递归的实现，往往需要改写递归函数，确保最后一步只调用自身。做到这一点的方法，就是把所有用到的内部变量改写成函数的参数。

两个方法可以解决这个问题。方法一是在尾递归函数之外，再提供一个正常形式的函数。

函数式编程有一个概念，叫做柯里化（currying），意思是将多参数的函数转换成单参数的形式。这里也可以使用柯里化。

总结一下，递归本质上是一种循环操作。纯粹的函数式编程语言没有循环操作命令，所有的循环都用递归实现，这就是为什么尾递归对这些语言极其重要。对于其他支持“尾调用优化”的语言（比如 Lua，ES6），只需要知道循环可以用递归代替，而一旦使用递归，就最好使用尾递归。

尾调用模式仅在严格模式下生效。


ES2017 允许函数的最后一个参数有尾逗号（trailing comma）。









   数组的扩展 

扩展运算符（spread）是三个点（...）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列


扩展运算符后面还可以放置表达式。

如果扩展运算符后面是一个空数组，则不产生任何效果。

如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。

rest匹配不到是空数组

扩展运算符还可以将字符串转为真正的数组。
能够正确识别四个字节的 Unicode 字符。

任何 Iterator 接口的对象（参阅 Iterator 一章），都可以用扩展运算符转为真正的数组。

对于那些没有部署 Iterator 接口的类似数组的对象，扩展运算符就无法将其转为真正的数组。


Array.from()
Array.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）

Array.from方法还支持类似数组的对象。所谓类似数组的对象，本质特征只有一点，即必须有length属性。因此，任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。

Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。

Array.from的第三个参数，用来绑定this。

Array.from()的另一个应用是，将字符串转为数组，然后返回字符串的长度


Array.of()
Array.of方法用于将一组值，转换为数组

Array.of总是返回参数值组成的数组。如果没有参数，就返回一个空数组。



copyWithin()
数组实例的copyWithin方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组。

target（必需）：从该位置开始替换数据。如果为负值，表示倒数。
start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。
end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。


find() 

数组实例的find方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。

find方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。
可以接受第二个参数，用来绑定回调函数的this对象。

 findIndex()
数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。
可以接受第二个参数，用来绑定回调函数的this对象。

这两个方法都可以发现NaN，弥补了数组的indexOf方法的不足


fill()
fill方法使用给定值，填充一个数组。

fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。

注意，如果填充的类型为对象，那么被赋值的是同一个内存地址的对象，而不是深拷贝对象。

entries()，keys()，values()
――用于遍历数组。它们都返回一个遍历器对象（详见《Iterator》一章），可以用for...of循环进行遍历，唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。

如果不使用for...of循环，可以手动调用遍历器对象的next方法，进行遍历。

includes()
返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似

第二个参数表示搜索的起始位置

数组的空位

注意，空位不是undefined，一个位置的值等于undefined，依然是有值的。空位是没有任何值，in运算符可以说明这一点。

forEach(), filter(), reduce(), every() 和some()都会跳过空位。
map()会跳过空位，但会保留这个值
join()和toString()会将空位视为undefined，而undefined和null会被处理成空字符串。

ES6 则是明确将空位转为undefined。









对象的扩展

属性的简洁表示法

ES6 允许直接写入变量和函数，作为对象的属性和方法

ES6 允许在对象之中，直接写变量。这时，属性名为变量名, 属性值为变量的值。

属性名表达式

（表达式）作为对象的属性名，即把表达式放在方括号内。

表达式还可以用于定义方法名。

注意，属性名表达式与简洁表示法，不能同时使用，会报错。

注意，属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串[object Object]，这一点要特别小心。

如果对象的方法使用了取值函数（getter）和存值函数（setter）返回值是方法名前加上get和set。
bind方法创造的函数，name属性返回bound加上原函数的名字；Function构造函数创造的函数，name属性返回anonymous。

如果对象的方法是一个 Symbol 值，那么name属性返回的是这个 Symbol 值的描述。


Object.is()
它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。

不同之处只有两个：一是+0不等于-0，二是NaN等于自身。


Object.assign()
Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。
Object.assign方法的第一个参数是目标对象，后面的参数都是源对象。

注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。

如果只有一个参数，Object.assign会直接返回该参数。

如果该参数不是对象，则会先转成对象，然后返回。

由于undefined和null无法转成对象，所以如果它们作为参数，就会报错。

如果非对象参数出现在源对象的位置（即非首参数），那么处理规则有所不同。首先，这些参数都会转成对象，如果无法转成对象，就会跳过。这意味着，如果undefined和null不在首参数，就不会报错。

其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果。

Object.assign拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。

（1）浅拷贝
如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。

（2）同名属性的替换
Object.assign的处理方法是替换

（3）数组的处理
Object.assign可以用来处理数组，但是会把数组视为对象。

（4）取值函数的处理
  将求值后再复制。

有四个操作会忽略enumerable为false的属性。

for...in循环：只遍历对象自身的和继承的可枚举的属性。
Object.keys()：返回对象自身的所有可枚举的属性的键名。
JSON.stringify()：只串行化对象自身的可枚举的属性。
Object.assign()： 忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。

ES6 一共有 5 种方法可以遍历对象的属性
（1）for...in
（2）Object.keys(obj)
（3）Object.getOwnPropertyNames(obj)
4）Object.getOwnPropertySymbols(obj)
（5）Reflect.ownKeys(obj)

首先遍历所有数值键，按照数值升序排列。
其次遍历所有字符串键，按照加入时间升序排列。
最后遍历所有 Symbol 键，按照加入时间升序排列。

Object.getOwnPropertyDescriptor方法会返回某个对象属性的描述对象

__proto__属性（前后各两个下划线），用来读取或设置当前对象的prototype对象

Object.setPrototypeOf方法的作用与__proto__相同，用来设置一个对象的prototype对象，返回参数对象本身。它是 ES6 正式推荐的设置原型对象的方法。

Object.getPrototypeOf()
用于读取一个对象的原型对象。


super 关键字
指向当前对象的原型对象。

注意，super关键字表示原型对象时，只能用在对象的方法之中，用在其他地方都会报错

Object.keys配套的Object.values和Object.entries，作为遍历一个对象的补充手段，供for...of循环使用。

Object.keys方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。

Object.values方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。

Object.entries方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组

如果原对象的属性名是一个 Symbol 值，该属性会被忽略。

注意，解构赋值的拷贝是浅拷贝，即如果一个键的值是复合类型的值（数组、对象、函数）、那么解构赋值拷贝的是这个值的引用，而不是这个值的副本。





*******************
Symbol
Symbol(bar)
********************

ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。

Symbol 值通过Symbol函数生成。

对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。

注意，Symbol 值作为对象属性名时，不能用点运算符。

在对象的内部，使用 Symbol 值定义属性时，Symbol 值必须放在方括号之中。

Symbol 作为属性名，该属性不会出现在for...in、for...of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回。但是，它也不是私有属性，有一个Object.getOwnPropertySymbols方法，可以获取指定对象的所有 Symbol 属性名。

Reflect.ownKeys方法可以返回所有类型的键名，包括常规键名和 Symbol 键名。

Symbol.for
可用获取同一个 Symbol 值

Symbol.for()与Symbol()这两种写法，都会生成新的 Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。


内置的 Symbol 值：

Symbol.hasInstance
Symbol.isConcatSpreadable
Symbol.species
Symbol.match
Symbol.replace
Symbol.search 
Symbol.split 
Symbol.iterator
Symbol.toPrimitive
Symbol.toStringTag
Symbol.unscopables §



Set 和 Map 数据结构

***************
Set
Set(3)?{Array(2)}
***************

ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值

Set 本身是一个构造函数，用来生成 Set 数据结构。

Set 函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。

// 去除数组的重复成员
[...new Set(array)]

在 Set 内部，两个NaN是相等。
两个对象总是不相等的。


Set 结构的实例有以下属性:

Set.prototype.constructor：构造函数，默认就是Set函数。
Set.prototype.size：返回Set实例的成员总数。

四个操作方法
add(value)：添加某个值，返回 Set 结构本身。
delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。
has(value)：返回一个布尔值，表示该值是否为Set的成员。
clear()：清除所有成员，没有返回值。


四个遍历方法，
keys()：返回键名的遍历器
values()：返回键值的遍历器
entries()：返回键值对的遍历器
forEach()：使用回调函数遍历每个成员


扩展运算符（...）内部使用for...of循环，所以也可以用于 Set 结构

同步改变原来的 Set 结构，
一种是利用原 Set 结构映射出一个新的结构，然后赋值给原来的 Set 结构；另一种是利用Array.from方法。


**************
WeakSet
**************
WeakSet 结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。

WeakSet 的成员只能是对象，而不能是其他类型的值。

WeakSet 中的对象都是弱引用
垃圾回收机制不考虑 WeakSet 对该对象的引用

WeakSet 不可遍历。

WeakSet 是一个构造函数，可以使用new命令，创建 WeakSet 数据结构

WeakSet 可以接受一个数组或类似数组的对象作为参数。（实际上，任何具有 Iterable 接口的对象，都可以作为 WeakSet 的参数。）该数组的所有成员，都会自动成为 WeakSet 实例对象的成员。

WeakSet 结构有以下三个方法。

WeakSet.prototype.add(value)：向 WeakSet 实例添加一个新成员。
WeakSet.prototype.delete(value)：清除 WeakSet 实例的指定成员。
WeakSet.prototype.has(value)：返回一个布尔值，表示某个值是否在 WeakSet 实例之中。

WeakSet 没有size属性，没有办法遍历它的成员。

********************
Map
Map(3)?{1 => "one"}
********************

ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。

Map 结构提供了“值―值”的对应

不仅仅是数组，任何具有 Iterator 接口、且每个成员都是一个双元素的数组的数据结构（详见《Iterator》一章）都可以当作Map构造函数的参数。这就是说，Set和Map都可以用来生成新的 Map。

如果对同一个键多次赋值，后面的值将覆盖前面的值。

如果读取一个未知的键，则返回undefined。

注意，只有对同一个对象的引用，Map 结构才将其视为同一个键。这一点要非常小心。

Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。

Map 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，Map 将其视为一个键

1）size 属性

（2）set(key, value)

（3）get(key)

（4）has(key

（5）delete(key)

（6）clear()

三个遍历器生成函数

keys()：返回键名的遍历器。
values()：返回键值的遍历器。
entries()：返回所有成员的遍历器。
forEach()：遍历 Map 的所有成员。

Map 结构转为数组结构，比较快速的方法是使用扩展运算符（...）。

Map 还有一个forEach方法，与数组的forEach方法类似，也可以实现遍历。

forEach方法还可以接受第二个参数，用来绑定this。


****************
WeakMap 
*****************
WeakMap结构与Map结构类似，也是用于生成键值对的集合。

WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名

WeakMap的键名所指向的对象，不计入垃圾回收机制。

WeakMap 就是为了解决这个问题而诞生的，它的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内

WeakMap 里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。


如果你要往对象上添加数据，又不想干扰垃圾回收机制，就可以使用 WeakMap。


注意，WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用。

WeakMap 与 Map 在 API 上的区别主要是两个，一是没有遍历操作

WeakMap只有四个方法可用：get()、set()、has()、delete()。








Proxy

Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。

因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。


ES6 原生提供 Proxy 构造函数，用来生成 Proxy 实例。

new Proxy()表示生成一个Proxy实例，target参数表示所要拦截的目标对象，handler参数也是一个对象，用来定制拦截行为。

注意，要使得Proxy起作用，必须针对Proxy实例（上例是proxy对象）进行操作，而不是针对目标对象（上例是空对象）进行操作。
访问proxy就等同于访问target。


 Proxy 支持的拦截操作一览，一共 13 种

get(target, propKey, receiver)：拦截对象属性的读取

set(target, propKey, value, receiver)：拦截对象属性的设置

has(target, propKey)：拦截propKey in proxy的操作，返回一个布尔值。

deleteProperty(target, propKey)：拦截delete proxy[propKey]的操作，返回一个布尔值。

ownKeys(target)：拦截属性的属性名

getOwnPropertyDescriptor(target, propKey)：拦截属性的描述对象

apply(target, object, args)：拦截 Proxy 实例作为函数调用的操作

construct(target, args)：拦截 Proxy 实例作为构造函数调用的操作

defineProperty(target, propKey, propDesc)

preventExtensions(target)

getPrototypeOf(target)

isExtensible(target)


Proxy 实例的方法

get() 
get方法用于拦截某个属性的读取操作.
三个参数，依次为目标对象、属性名和 proxy 实例本身

set()
set方法用来拦截某个属性的赋值操作，
四个参数，依次为目标对象、属性名、属性值和 Proxy 实例本身

apply()
apply方法拦截函数的调用、call和apply操作
三个参数，分别是目标对象、目标对象的上下文对象（this）和目标对象的参数数组。


has() 
has方法用来拦截HasProperty操作，即判断对象是否具有某个属性时，这个方法会生效。典型的操作就是in运算符。

construct() 
construct方法用于拦截new命令，下面是拦截对象的写法

两个参数。
target: 目标对象
args：构建函数的参数对象

deleteProperty() 
deleteProperty方法用于拦截delete操作，如果这个方法抛出错误或者返回false，当前属性就无法被delete命令删除。

defineProperty()
defineProperty方法拦截了Object.defineProperty操作。

getOwnPropertyDescriptor()
getOwnPropertyDescriptor方法拦截Object.getOwnPropertyDescriptor()，返回一个属性描述对象或者undefined。

getPrototypeOf()
getPrototypeOf方法主要用来拦截获取对象原型。具体来说，拦截下面这些操作。
Object.prototype.__proto__
Object.prototype.isPrototypeOf()
Object.getPrototypeOf()
Reflect.getPrototypeOf()
instanceof


isExtensible()
isExtensible方法拦截Object.isExtensible操作。

ownKeys() § ?
ownKeys方法用来拦截对象自身属性的读取操作。具体来说，拦截以下操作。
Object.getOwnPropertyNames()
Object.getOwnPropertySymbols()
Object.keys()

preventExtensions()
preventExtensions方法拦截Object.preventExtensions()。该方法必须返回一个布尔值，否则会被自动转为布尔值。

setPrototypeOf()
setPrototypeOf方法主要用来拦截Object.setPrototypeOf方法。

Proxy.revocable()
Proxy.revocable方法返回一个可取消的 Proxy 实例。


this 问题
主要原因就是在 Proxy 代理的情况下，目标对象内部的this关键字会指向 Proxy 代理。







Reflect

Reflect对象的设计目的有这样几个。

（1） 将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上。

（2） 修改某些Object方法的返回结果，让其变得更合理。

（3） 让Object操作都变成函数行为。

（4）Reflect对象的方法与Proxy对象的方法一一对应


Reflect对象一共有 13 个静态方法。

Reflect.get(target, name, receiver)
Reflect.get方法查找并返回target对象的name属性，如果没有该属性，则返回undefined。

Reflect.set(target, name, value, receiver) § ?
Reflect.set方法设置target对象的name属性等于value。


Reflect.has(obj, name)
Reflect.has方法对应name in obj里面的in运算符。

Reflect.deleteProperty(obj, name)
Reflect.deleteProperty方法等同于delete obj[name]，用于删除对象的属性。

Reflect.construct(target, args) § ?
Reflect.construct方法等同于new target(...args)，这提供了一种不使用new，来调用构造函数的方法。

Reflect.getPrototypeOf(obj)
Reflect.getPrototypeOf方法用于读取对象的__proto__属性，对应Object.getPrototypeOf(obj)。

Reflect.setPrototypeOf(obj, newProto)
Reflect.setPrototypeOf方法用于设置对象的__proto__属性，返回第一个参数对象，对应Object.setPrototypeOf(obj, newProto)。

Reflect.apply(func, thisArg, args)
Reflect.apply方法等同于Function.prototype.apply.call(func, thisArg, args)，用于绑定this对象后执行给定函数。

Reflect.defineProperty(target, propertyKey, attributes)
Reflect.defineProperty方法基本等同于Object.defineProperty，用来为对象定义属性。未来，后者会被逐渐废除，请从现在开始就使用Reflect.defineProperty代替它。


Reflect.getOwnPropertyDescriptor(target, propertyKey) § ?
Reflect.getOwnPropertyDescriptor基本等同于Object.getOwnPropertyDescriptor，用于得到指定属性的描述对象，将来会替代掉后者。

Reflect.isExtensible (target)
Reflect.isExtensible方法对应Object.isExtensible，返回一个布尔值，表示当前对象是否可扩展。

Reflect.preventExtensions(target)
Reflect.preventExtensions对应Object.preventExtensions方法，用于让一个对象变为不可扩展。它返回一个布尔值，表示是否操作成功。

Reflect.ownKeys (target)
Reflect.ownKeys方法用于返回对象的所有属性，基本等同于Object.getOwnPropertyNames与Object.getOwnPropertySymbols之和。

实例：使用 Proxy 实现观察者模式 § ?
观察者模式（Observer mode）指的是函数自动观察数据对象，一旦对象有变化，函数就会自动执行。
observable和observe


******************
Promise 对象
******************

Promise 是异步编程的一种解决方案，比传统的解决方案――回调函数和事件――更合理和更强大

Promise，简单说就是一个容器,
从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。

Promise对象有以下两个特点。
（1）对象的状态不受外界影响。有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。
可以决定当前是哪一种状态，任何其他操作都无法改变这个状态.

（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果.
Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。

Promise，一旦新建它就会立即执行，无法中途取消。
如果不设置回调函数，Promise内部抛出的错误，不会反应到外部.当处于pending状态时，无法得知目前进展到哪一个阶段


ES6 规定，Promise对象是一个构造函数，用来生成Promise实例。
Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject.

resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”。

reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”。

Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。

then方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。

注意，调用resolve或reject并不会终结 Promise 的参数函数的执行。

一般来说，调用resolve或reject以后，Promise 的使命就完成了，后继操作应该放到then方法里面，而不应该直接写在resolve或reject的后面。所以，最好在它们前面加上return语句，这样就不会有意外。


Promise.prototype.then()
。它的作用是为 Promise 实例添加状态改变时的回调函数。

Promise.prototype.catch() 
Promise.prototype.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数。

Promise.prototype.finally() 
finally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。


Promise.all()
Promise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例

注意，如果作为参数的 Promise 实例，自己定义了catch方法，那么它一旦被rejected，并不会触发Promise.all()的catch方法。

Promise.race()
Promise.race方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。


Promise.resolve()


Promise.reject() § ?
Promise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为rejected。

Promise.try()






Iterator 和 for...of 循环


遍历器（Iterator）就是这样一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。


ES6 创造了一种新的遍历命令for...of循环，Iterator 接口主要供for...of消费。


原生具备 Iterator 接口的数据结构如下。

Array
Map
Set
String
TypedArray
函数的 arguments 对象
NodeList 对象






async 函数

async函数自带执行器

async和await，比起星号和yield，语义更清楚了。async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。

返回值是 Promise。

async函数返回一个 Promise 对象，可以使用then方法添加回调函数。当函数执行的时候，一旦遇到await就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。


返回 Promise 对象
async函数返回一个 Promise 对象。

async函数内部return语句返回的值，会成为then方法回调函数的参数。

async函数内部抛出错误，会导致返回的 Promise 对象变为reject状态。抛出的错误对象会被catch方法回调函数接收到。

Promise 对象的状态变化 

async函数返回的 Promise 对象，必须等到内部所有await命令后面的 Promise 对象执行完，才会发生状态改变，除非遇到return语句或者抛出错误。也就是说，只有async函数内部的异步操作执行完，才会执行then方法指定的回调函数。


await 命令 
正常情况下，await命令后面是一个 Promise 对象。如果不是，会被转成一个立即resolve的 Promise 对象。

await命令后面的 Promise 对象如果变为reject状态，则reject的参数会被catch方法的回调函数接收到。

注意，上面代码中，await语句前面没有return，但是reject方法的参数依然传入了catch方法的回调函数。这里如果在await前面加上return，效果是一样的。

只要一个await语句后面的 Promise 变为reject，那么整个async函数都会中断执行。

我们希望即使前一个异步操作失败，也不要中断后面的异步操作。这时可以将第一个await放在try...catch结构里面，这样不管这个异步操作是否成功，第二个await都会执行。

另一种方法是await后面的 Promise 对象再跟一个catch方法，处理前面可能出现的错误


使用注意点
第一点，前面已经说过，await命令后面的Promise对象，运行结果可能是rejected，所以最好把await命令放在try...catch代码块中。

第二点，多个await命令后面的异步操作，如果不存在继发关系，最好让它们同时触发
let [foo, bar] = await Promise.all([getFoo(), getBar()]);

第三点，await命令只能用在async函数之中，如果用在普通函数，就会报错。


































